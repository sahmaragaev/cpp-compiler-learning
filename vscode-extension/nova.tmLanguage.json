{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Nova",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#strings"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#storage"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#variables"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.nova",
                    "match": "//.*$"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.nova",
                    "match": "\\b(if|else|while|for|return)\\b"
                },
                {
                    "name": "keyword.other.nova",
                    "match": "\\b(function|print)\\b"
                }
            ]
        },
        "storage": {
            "patterns": [
                {
                    "name": "storage.type.nova",
                    "match": "\\b(int|float|string|bool|void)\\b"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.boolean.nova",
                    "match": "\\b(true|false)\\b"
                }
            ]
        },
        "strings": {
            "patterns": [
                {
                    "name": "string.quoted.double.nova",
                    "begin": "\"",
                    "end": "\"",
                    "patterns": [
                        {
                            "name": "constant.character.escape.nova",
                            "match": "\\\\[\"\\\\nrt]"
                        }
                    ]
                }
            ]
        },
        "numbers": {
            "patterns": [
                {
                    "name": "constant.numeric.float.nova",
                    "match": "\\b[0-9]+\\.[0-9]+\\b"
                },
                {
                    "name": "constant.numeric.integer.nova",
                    "match": "\\b[0-9]+\\b"
                }
            ]
        },
        "operators": {
            "patterns": [
                {
                    "name": "keyword.operator.assignment.nova",
                    "match": "="
                },
                {
                    "name": "keyword.operator.comparison.nova",
                    "match": "(==|!=|<=|>=|<|>)"
                },
                {
                    "name": "keyword.operator.arithmetic.nova",
                    "match": "[+\\-*/%]"
                },
                {
                    "name": "keyword.operator.logical.nova",
                    "match": "(&&|\\|\\||!)"
                }
            ]
        },
        "functions": {
            "patterns": [
                {
                    "name": "meta.function.nova",
                    "match": "\\b(function)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "keyword.other.function.nova"
                        },
                        "2": {
                            "name": "storage.type.function.nova"
                        },
                        "3": {
                            "name": "entity.name.function.nova"
                        }
                    }
                },
                {
                    "name": "meta.function-call.nova",
                    "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.nova"
                        }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "variable.other.nova",
                    "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
                }
            ]
        }
    },
    "scopeName": "source.nova"
}